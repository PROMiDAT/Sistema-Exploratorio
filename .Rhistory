library(stringr)
library(rvest)
library(XML)
library(dplyr)
Friends<-read_html("https://en.wikipedia.org/wiki/List_of_Friends_episodes")
TablasFriends<-html_nodes(Friends, "table")
TablasFriends2<-Friends %>%
html_nodes("table") %>%
.[2:13] %>%
html_table(fill = TRUE)
head(TablasFriends2[[1]], 4)
TablasFriends2[[1]]<-TablasFriends2[[1]][-1,]
Season1<-TablasFriends2[[1]][,c(6,8)]
Season2<-TablasFriends2[[2]][,c(6,8)]
Season3<-TablasFriends2[[3]][,c(6,8)]
Season4<-TablasFriends2[[4]][,c(6,8)]
Season5<-TablasFriends2[[5]][,c(6,8)]
Season6<-TablasFriends2[[6]][,c(6,8)]
Season7<-TablasFriends2[[7]][,c(6,8)]
SeasonEsp1<-TablasFriends2[[8]][,c(3,4)]
names(SeasonEsp1)[2]<-"US viewers(millions)"
Season8<-TablasFriends2[[9]][,c(6,8)]
Season9<-TablasFriends2[[10]][,c(6,8)]
Season10<-TablasFriends2[[11]][,c(6,8)]
SeasonEsp2<-TablasFriends2[[12]][,c(3,4)]
names(SeasonEsp2)[2]<-"US viewers(millions)"
FriendsTotal<-bind_rows(Season1, Season2, Season3, Season4, Season5, Season6, Season7, Season8, Season9, Season10, SeasonEsp1, SeasonEsp2)
Fecha<-str_extract(FriendsTotal$`Original air date`, "\\d{1,4}[-/]\\d{1,2}[-/]\\d{1,4}")
Televidentes<-as.numeric(str_extract(FriendsTotal$`US viewers(millions)`, "\\d+\\.?\\d?")) * 100000
FriendsTotal<-cbind(FriendsTotal, Fecha)
FriendsTotal<-cbind(FriendsTotal, Televidentes)
FriendsTotal<-FriendsTotal[,-c(1,2)]
FriendsTotal$Fecha<-as.Date(FriendsTotal$Fecha)
FriendsTotal$Televidentes<-as.factor(FriendsTotal$Televidentes)
FriendsTotal2<-FriendsTotal[(order(as.Date(FriendsTotal$Fecha))),]
FriendsTotal2
##Calculo de PredicciÃ³n
ER <- function(Pron,Real) {
return(sum(abs(Pron-Real))/sum(abs(Real)))
}
# mean squared error (MSE)
ECM<-function(Pred,Real) {
N<-length(Real)
ss<-sum((Real-Pred)^2)
return((1/N)*ss)
}
PFA <- function(Pron,Real) {
Total<-0
N<-length(Pron)
for(i in 1:N) {
if(Pron[i]>Real[i])
Total<-Total+1
}
return(Total/N)
}
PTFA <- function(Pron,Real) {
Total<-0
SReal<-0
N<-length(Pron)
for(i in 1:N) {
if(Pron[i]>Real[i]) {
Total<-Total+(Pron[i]-Real[i])
SReal<-SReal+abs(Real[i])
}
}
if(Total==0)
SReal=1
return(Total/SReal)
}
calibrar<-function(serie.aprendizaje,serie.testing) {
error.c<-Inf
alpha.i<-0.1
while(alpha.i<=1) {
beta.i<-0
while(beta.i<=1) {
gamma.i<-0
while(gamma.i<=1) {
mod.i<-HoltWinters(serie.aprendizaje,alpha=alpha.i,beta=beta.i,gamma=gamma.i)
res.i<-predict(mod.i,n.ahead=length(serie.testing))
error.i<-sqrt(ECM(res.i,serie.testing))
if(error.i<error.c) {
error.c<-error.i
mod.c<-mod.i
}
gamma.i<-gamma.i+0.1
}
beta.i<-beta.i+0.1
}
alpha.i<-alpha.i+0.1
}
return(mod.c)
}
library(timeDate)
library(xts)
library(forecast)
library(dygraphs)
FriendsTS<-xts(FriendsTotal2$Televidentes, order.by = FriendsTotal2$Fecha)
dygraph(FriendsTS) %>%
dyRangeSelector()
#Holt-Winters
top<-round(length(FriendsTS)*0.9, digits = 0)
Sampling<-seq(1:top)
Due.Aprendizaje<-FriendsTS[Sampling]
Due.Aprendizaje<-as.data.frame(Due.Aprendizaje)
Due.Aprendizaje<-ts(Due.Aprendizaje$V1, start = c(1994,1), frequency = 24)
Due.Testing<-FriendsTS[-Sampling]
Due.Testing<-as.data.frame(Due.Testing)
Due.Testing<-ts(Due.Testing$V1, start = c(2002,1), frequency = 24)
CalibrarHWDue<-calibrar(Due.Aprendizaje, Due.Testing)
res.Due.HW<-predict(CalibrarHWDue, n.ahead=length(Due.Testing))
er.Due.HW<-ER(res.Due.HW, Due.Testing)
pfa.Due.HW<-PFA(res.Due.HW, Due.Testing)
ecm.Due.HW<-sqrt(ECM(res.Due.HW, Due.Testing))
ptfa.Due.HW<-PTFA(res.Due.HW, Due.Testing)
ERR.Due.HW<-c(er.Due.HW, pfa.Due.HW, ecm.Due.HW, ptfa.Due.HW)
CalibrarHWDue
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
FriendsTS<-ts(FriendsTotal2$Televidentes, order.by = FriendsTotal2$Fecha)
FriendsTS<-ts(FriendsTotal2$Televidentes)
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
FriendsTS<-ts(FriendsTotal2$Televidentes, frequency = 4)
FriendsTS
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
modelo.Due.HW
library(PROMIDAT.EXPLORATORIO.SHINY)
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
library(PROMIDAT.EXPLORATORIO.SHINY)
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
library(PROMIDAT.EXPLORATORIO.SHINY)
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
runApp('inst/application')
runApp('inst/application')
library(PROMIDAT.EXPLORATORIO.SHINY)
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
PROMIDAT.EXPLORATORIO.SHINY:::init_shiny_exploratorio()
library(PROMIDAT.EXPLORATORIO.SHINY)
init_shiny_exploratorio()
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
shinyWidgets::colorSelectorExample()
shinyWidgets::demoAirDatepicker()
shinyWidgets::demoNoUiSlider()
shinyWidgets::shinyWidgetsGallery()
runApp('inst/application')
runApp('inst/application')
str(datos)
runApp('inst/application')
runApp('inst/application')
datos <<- datos.originales
datos <<- datos.disyuntivos(datos, 'MontoCuota')
datos
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
subset(iris, select = -Sepal.Length )
head(subset(iris, select = -Sepal.Length))
head(subset(iris, select = -c(Sepal.Length)))
head(subset(iris, select != c(Sepal.Length)))
head(subset(iris, select = !c(Sepal.Length)))
head(subset(iris, select = !c(Sepal.Length)))
head(subset(iris, select = -c(Sepal.Length)))
head(subset(iris, select = -c(Sepal.Length, Species)))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
library(PROMIDAT.EXPLORATORIO.SHINY)
shiny::runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
modelo.cor()
hc.modelo
unclass(hc.modelo)
unclass(centros)
unclass(k.modelo)
unclass(pca.modelo)
correlacion
runApp('inst/application')
runApp('inst/application')
unclass(pca.modelo)
as.character(unclass(pca.modelo))
runApp('inst/application')
print(unclass(pca.modelo))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
shiny::runApp('inst/application')
runApp('inst/application')
shiny::runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
correlacion
runApp('inst/application')
runApp('inst/application')
as.data.frame(summary(datos))
summary()
summary(datos)
DT::datatable(datos)
DT::datatable(summary(datos))
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)::datatable(summary(datos))
shiny::datatable(summary(datos))
shiny::dataTableOutput(summary(datos))
DT::datatable(summary(datos))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
data.frame(summary(dato))
data.frame(summary(datos))
summary(datos)
runApp('inst/application')
summary(datos)
data.frame(summary(datos))
t(data.frame(summary(datos)))
data.frame(summary(datos))
data.frame(unclass(summary(datos)), check.names = FALSE, stringsAsFactors = FALSE)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
unclass(hc.modelo)
unclass(k.modelo)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
centros
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
c(5, 1:4)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(iris)
))
print(sketch)
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = FALSE
)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(class(iris))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, class))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 1, class))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, class))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) i))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) class(i))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) class(i)))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) class(iris[, i])))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) class(iris$i)))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) class(iris[, i])))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(apply(iris, 2, function(i) iris[, i]))
))
print(sketch)
apply(iris, 2, function(i) iris[, i]))
apply(iris, 2, function(i) iris[, i])
apply(iris, 2, function(i) i)
sapply(colnames(iris), function(i) class(iris[,i]))
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(sapply(colnames(iris), function(i) class(iris[,i])))
))
print(sketch)
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = FALSE
)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(sapply(colnames(iris), function(i) class(iris[,i])))
))
print(sketch)
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = FALSE
)
runApp('inst/application')
runApp('inst/application')
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(sapply(colnames(iris), function(i) class(iris[,i])))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(sapply(colnames(iris), function(i) ifelse(class(iris[,i]) %in% c("numeric", "integer"), "NumÃ©rico", "CatÃ©gorico")))
))
print(sketch)
sketch = htmltools::withTags(table(
tableHeader(iris),
tableFooter(sapply(colnames(iris), function(i) ifelse(class(iris[,i]) %in% c("numeric", "integer"), "NumÃ©rico", "CategÃ³rico")))
))
print(sketch)
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = FALSE
)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
datos
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = FALSE
)
datatable(
head(iris, 10),
container = sketch, options = list(pageLength = 5, dom = 'tip'), rownames = T
)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
sketch
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
update()
datos
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
sapply(colnames(datos), function(i) ifelse(class(datos[,i]) %in% c("numeric", "integer"), "NumÃ©rico", "CategÃ³rico"))
c("ID", sapply(colnames(datos), function(i) ifelse(class(datos[,i]) %in% c("numeric", "integer"), "NumÃ©rico", "CategÃ³rico")))
c("", sapply(colnames(datos), function(i) ifelse(class(datos[,i]) %in% c("numeric", "integer"), "NumÃ©rico", "CategÃ³rico")))
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
library(colourpicker)
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
runApp('inst/application')
load("~/Desktop/PROMIDAT-EXPLORATORIO-SHINY/.RData")
load("~/Desktop/PROMIDAT-EXPLORATORIO-SHINY/.RData")
shiny::runApp('inst/application')
runApp('inst/application')
gg_color_hue <- function(n) {
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
}
n = 4
cols = gg_color_hue(n)
dev.new(width = 4, height = 4)
plot(1:n, pch = 16, cex = 2, col = cols)
cols
seq(15, 375, length = n + 1)
hues = seq(15, 375, length = n + 1)
hcl(h = hues, l = 65, c = 100)[1:n]
cols = gg_color_hue(10)
plot(1:n, pch = 16, cex = 2, col = cols)
dev.new(width = 10, height = 10)
plot(1:n, pch = 16, cex = 2, col = cols)
dev.new(width = 10, height = 10)
plot(1:n, pch = 16, cex = 2, col = cols)
plot(1:10, pch = 16, cex = 2, col = cols)
cols = gg_color_hue(n)
cols = gg_color_hue(10)
plot(1:10, pch = 16, cex = 2, col = cols)
plot(1:10, pch = 17, cex = 2, col = cols)
plot(1,2)
plot(1:10, pch = 17, cex = 2, col = cols)
