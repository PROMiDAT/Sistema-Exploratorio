coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = fct_reorder2(Canton), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = fct_reorder2(Canton, Delito), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = fct_reorder(Canton, Delito), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = fct_reorder(Canton, Delito), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = Canton, y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = reorder(Canton, -Delito), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = reorder(Canton, Delito), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
warnings()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(x = reorder(Canton, count(Delito)), y = Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
datos %>% count(Delito)
datos %>% count(Canton,Delito)
datos %>% select(Provincia == "SAN JOSE") %>% count(Canton, Delito)
datos %>% select(Provincia == "SAN JOSE") %>% count(Canton, Delito)
datos$Provincia
datos %>% select(Provincia == "SAN JOSE")
datos %>% select(datos$Provincia == "SAN JOSE") %>% count(Canton, Delito)
datos %>% select(datos, Provincia == "SAN JOSE") %>% count(Canton, Delito)
datos %>% select(Provincia) %>% count(Canton, Delito)
datos %>% select(Provincia, Canton) %>% count(Canton, Delito)
datos %>% select(Provincia, Canton, Delito) %>% count(Canton, Delito)
datos %>% filter(Provincia == "SAN JOSE") %>% count(Canton, Delito)
datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
aux <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
ggplot(aux, mapping = aes(x = reorder(Canton, n), y = n)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(OIJ_Totales, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(Canto, Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(Canto, Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
ggplot(data = subset(datos, Provincia == "SAN JOSE" & Delito == "ASALTO"), mapping = aes(Canton, Delito)) +
geom_col() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")+
coord_flip() +
theme_minimal()
colourpicker:::colourPickerAddin()
colourpicker:::colourPickerAddin()
aux <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
library(dplyr)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/OIJ_estadisticas_2015.csv", sep = ",", dec = ".", header = T)
aux <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
delitos.x.canton <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
ggplot(data = delitos.x.canton, mapping = aes(fct_reorder(Canton, n), n)) +
geom_col() + coord_flip() + theme_minimal() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")
library(ggplot2)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/OIJ_estadisticas_2015.csv", sep = ",", dec = ".", header = T)
delitos.x.canton <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
ggplot(data = delitos.x.canton, mapping = aes(fct_reorder(Canton, n), n)) +
geom_col() + coord_flip() + theme_minimal() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")
library(forcats)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/OIJ_estadisticas_2015.csv", sep = ",", dec = ".", header = T)
delitos.x.canton <- datos %>% filter(Provincia == "SAN JOSE") %>% filter(Delito == "ASALTO") %>% count(Canton, Delito)
ggplot(data = delitos.x.canton, mapping = aes(fct_reorder(Canton, n), n)) +
geom_col() + coord_flip() + theme_minimal() +
labs(title = "Asalto por Cantos para la Provincia de San Jose", x = "Cantones", y = "Cantidad de Asaltos")
ymd
library(lubridate)
ymd(datos$Fecha)
aux <- ymd(datos$Fecha)
aux
year(aux)
month(aux)
datos$Fecha <- ymd(datos$Fecha)
delitos.x.mes <- datos %>% filter(Delito == "ASALTO") %>% count(month(datos$Fecha), Delito)
delitos.x.mes
lubridate::month(aux, label = T)
lubridate::month(aux, label = T, abbr = F)
lubridate::month(aux, label = T, abbr = F, locale = Sys.setlocale("LC_ALL","English"))
lubridate::month(aux, label = T, abbr = F, locale = Sys.setlocale("LC_ALL","English"))
lubridate::month(aux, label = T, abbr = F)
Sys.getlocale("LC_TIME")
delitos.x.mes
datos$Fecha <- ymd(datos$Fecha)
delitos.x.mes
colnames(delitos.x.mes)
colnames(delitos.x.mes)[1] <- "Mes"
delitos.x.mes
delitos.x.mes$Mes <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre")
delitos.x.mes
ggplot(data = delitos.x.mes, aes(Mes, n))
ggplot(data = delitos.x.mes, aes(Mes, n)) + geom_line()
ggplot(data = delitos.x.mes) + geom_line(aes(Mes, n))
ggplot() + geom_line(data = delitos.x.mes, aes(Mes, n))
ggplot(data = delitos.x.mes, aes(Mes, n)) + geom_bar()
ggplot(data = delitos.x.mes, mapping = aes(Mes, n)) + geom_bar()
ggplot(delitos.x.mes, aes(x = Mes, y = n))
ggplot(delitos.x.mes, aes(x = Mes, y = n)) + geom_point()
ggplot(delitos.x.mes, aes(x = Mes, y = n)) + geom_bar()
ggplot(delitos.x.mes, aes(x = Mes, y = n)) + geom_point()
ggplot(delitos.x.mes, aes(x = Mes, y = n)) + geom_point() + geom_line()
ggplot(delitos.x.mes, aes(x = Mes, y = n)) + geom_point() + geom_line(delitos.x.mes, aes(x = Mes, y = n))
ggplot(delitos.x.mes, aes(x = Mes, y = n, group = 1)) + geom_point() + geom_line()
delitos.x.mes$Mes
factor(delitos.x.mes$Mes)
factor(delitos.x.mes$Mes, levels = meses, ordered = T)
meses <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre")
factor(delitos.x.mes$Mes, levels = meses, ordered = T)
meses <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre")
delitos.x.mes$Mes <- meses
delitos.x.mes
ggplot(delitos.x.mes, aes(x = Mes, y = n, group = 1)) + geom_point() + geom_line()
datos$Fecha <- ymd(datos$Fecha)
delitos.x.mes <- datos %>% filter(Delito == "ASALTO") %>% count(month(datos$Fecha), Delito)
colnames(delitos.x.mes)[1] <- "Mes"
meses <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre")
delitos.x.mes$Mes <- factor(delitos.x.mes$Mes, levels = meses, ordered = T)
delitos.x.mes
datos$Fecha <- ymd(datos$Fecha)
delitos.x.mes <- datos %>% filter(Delito == "ASALTO") %>% count(month(datos$Fecha), Delito)
colnames(delitos.x.mes)[1] <- "Mes"
meses <- c("Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Setiembre", "Octubre", "Noviembre", "Diciembre")
delitos.x.mes$Mes <- factor(meses, levels = meses, ordered = T)
delitos.x.mes
ggplot(delitos.x.mes, aes(x = Mes, y = n, group = 1)) + geom_point() + geom_line()
ggplot(delitos.x.mes, aes(x = Mes, y = n, group = 1)) +
geom_point() + geom_line() + theme_minimal() +
labs(y = "Cantidad de Asaltos", main = "Cantidad de asaltos por mes durante el año 2015")
ggplot(delitos.x.mes, aes(x = Mes, y = n, group = 1)) +
geom_point() + geom_line() + theme_minimal() +
labs(y = "Cantidad de Asaltos", title = "Cantidad de asaltos por mes durante el año 2015")
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
library(ggcr)
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 1) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 2) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 3) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 1) +
theme_minimal()
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
mapa
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", header = T)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", header = T)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ";", dec = ".", header = T)
censo_inec_2011 <- read.csv("~/Downloads/DatosClaseTarea/censo_inec_2011.csv")
View(censo_inec_2011)
read.csv
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", quote = "\"", header = T)
datos
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
datos
datos$Canton
mapa <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
ggplot(data = mapa, aes(x = long, y = lat))
mapa
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
mapa$group
datos$Poblacion_Total
ggplot(data = mapa, aes(x = long, y = lat)) +
geom_polygon(data = datos, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
mapa$long
ggplot(data = mapa, aes(x = mapa$long, y = mapa$lat)) +
geom_polygon(data = datos, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
datos$Canton
datos
datos
colnames(datos)
datos %>% filter(Provincia == "San Jose")
aux <- datos %>% filter(Provincia == "San Jose")
ggplot(data = mapa, aes(x = long, y = lat)) +
geom_polygon(data = aux, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
ggplot(data = mapa, aes(x = mapa$long, y = mapa$lat)) +
geom_polygon(data = aux, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
aux
aux <- datos %>% filter(Provincia == "San Jose") %>% filter(Canton == "San Jose")
aux
mapa$group
mapa
install.packages("stringi")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
codigo.color <- '<div class="colourpicker-input-container">
<input id="col.pca.ind" class="form-control shiny-colour-input colourpicker-input shiny-bound-input" data-init-value="#696969"
data-show-colour="both" data-palette="square" data-allow-alpha="true" spellcheck="false"
size="7" style="color: rgb(221, 221, 221); background-color: rgb(105, 105, 105);" type="text">
<div class="colourpicker-panel" style="display: none;">
<div class="colourpicker-slider colourpicker-sprite">
<div class="colourpicker-slider-picker" style="top: 150px;"></div>
</div>
<div class="colourpicker-alpha-slider">
<div class="colourpicker-alpha-inner-slider" style="background: rgba(0, 0, 0, 0) linear-gradient(rgb(105, 105, 105) 0px, rgba(105, 105, 105, 0) 100%) repeat scroll 0% 0%;"></div>
<div class="colourpicker-slider-picker" style="top: 0px;"></div>
</div>
<div class="colourpicker-grid">
<div class="colourpicker-grid-inner colourpicker-sprite" style="background-color: rgb(255, 0, 0);">
<div class="colourpicker-grid-inner-2"></div>
</div>
<div class="colourpicker-picker" style="top: 88px; left: 0px;"></div>
</div>
</div>
</div>'
codigo.color
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colorSelectorExample()
library("shiny")
library("shinyWidgets")
library("RColorBrewer")
ui <- fluidPage(
tags$h1("Spectrum color picker"),
br(),
spectrumInput(
inputId = "myColor",
label = "Pick a color:",
choices = list(
list('black', 'white', 'blanchedalmond', 'steelblue', 'forestgreen'),
as.list(brewer.pal(n = 9, name = "Blues")),
as.list(brewer.pal(n = 9, name = "Greens")),
as.list(brewer.pal(n = 11, name = "Spectral")),
as.list(brewer.pal(n = 8, name = "Dark2"))
),
options = list(`toggle-palette-more-text` = "Show more")
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(input$myColor)
}
shinyApp(ui, server)
colourWidget()
# Example 2
library(shiny)
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
4
colourPicker
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
library(shiny)
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
4
colourPicker
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
# Example 1
library(shiny)
shinyApp(
ui = fluidPage(
colourInput("col", "Choose colour", "red"),
plotOutput("plot")
),
server = function(input, output, session) {
output$plot <- renderPlot({
plot(1:10, col = input$col)
})
}
)
runApp()
runApp()
?PCA
shinyWidgets::animations
shinyWidgets::demoAirDatepicker()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hclust
?dist
runApp()
?hclust
?dist
runApp()
runApp()
runApp()
runApp()
runApp()
?kmeans
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos
shiny::runApp()
install.packages("shiny", "shinyAce", "shinydashboard", "shinycssloaders", "shinyWidgets", "colourpicker", "shinyjs", "knitr", "DT", "promises", "ggplot2", "FactoMineR", "factoextra", "reshape", "corrplot", "dendextend", "scatterplot3d", "stringr")
install.packages("shiny", "shinyAce", "shinydashboard", "shinycssloaders", "shinyWidgets", "colourpicker", "shinyjs", "knitr", "DT", "promises", "ggplot2", "FactoMineR", "factoextra", "reshape", "corrplot", "dendextend", "scatterplot3d", "stringr")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
datos
datos[, -c("Res")]
subset[datos, select = -("Res")]
datos
subset[datos, select = -(Res)]
subset[datos, select = -c(Res)]
subset[datos, select = Res]
subset[datos, select = "Res"]
subset[datos, select = Res]
subset[datos, select = "Res"]
head(datos)
subset(datos, select = "Res")
subset(datos, select = -c("Res"))
subset(datos, select = -c(Res))
subset(datos, select = -c(Res, GPA))
c("asd", "sdf", "qwe")
c("asd", "sdf", "qwe")
subset(datos, select = -c(Res GPA))
subset(datos, select = -Res GPA)
subset(datos, select = -Res)
as.formula(c("asd", "sdf", "qwe"))
paste(c("asd", "asd", "asd"))
paste(c("asd", "asd", "asd"), sep = ",")
paste(c("asd", "asd", "asd"), sep = " ")
paste(c("asd", "asd", "asd"), sep = ".")
paste("asd" "asd" "asd", sep = ".")
paste(c("asd", "asd", "asd"), sep = " ")
paste(c("asd", "asd", "asd"), collapse =  = " ")
paste(c("asd", "asd", "asd"), collapse = ",")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
code.desactivar(c("123", "123"))
colnames(datos)
datos <<- subset(datos, select = -c(Velocidad.Entrega,Numero.Estrellas))
datos
runApp()
runApp()
runApp()
