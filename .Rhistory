theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 3) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group)) + coord_fixed(ratio = 1) +
theme_minimal()
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
mapa
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", header = T)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", header = T)
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ";", dec = ".", header = T)
censo_inec_2011 <- read.csv("~/Downloads/DatosClaseTarea/censo_inec_2011.csv")
View(censo_inec_2011)
read.csv
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv", sep = ",", dec = ".", quote = "\"", header = T)
datos
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
datos
datos$Canton
mapa <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
ggplot(data = mapa, aes(x = long, y = lat))
mapa
mapa <- ggcr::get_map(prov = "San Jose",cant = "all",dist = "all")
ggplot(data = mapa, mapping = aes(x = long, y = lat)) +
geom_polygon(mapping = aes(group = group))+
coord_fixed(ratio = 1) +
theme_minimal()
datos <- read.table(file = "/Users/promidat05/Downloads/DatosClaseTarea/censo_inec_2011.csv",
sep = ",", dec = ".", quote = "\"", header = T)
mapa$group
datos$Poblacion_Total
ggplot(data = mapa, aes(x = long, y = lat)) +
geom_polygon(data = datos, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
mapa$long
ggplot(data = mapa, aes(x = mapa$long, y = mapa$lat)) +
geom_polygon(data = datos, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
datos$Canton
datos
datos
colnames(datos)
datos %>% filter(Provincia == "San Jose")
aux <- datos %>% filter(Provincia == "San Jose")
ggplot(data = mapa, aes(x = long, y = lat)) +
geom_polygon(data = aux, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
ggplot(data = mapa, aes(x = mapa$long, y = mapa$lat)) +
geom_polygon(data = aux, mapping = aes(group = mapa$group, fill = Poblacion_Total),size = .2)
aux
aux <- datos %>% filter(Provincia == "San Jose") %>% filter(Canton == "San Jose")
aux
mapa$group
mapa
install.packages("stringi")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
codigo.color <- '<div class="colourpicker-input-container">
<input id="col.pca.ind" class="form-control shiny-colour-input colourpicker-input shiny-bound-input" data-init-value="#696969"
data-show-colour="both" data-palette="square" data-allow-alpha="true" spellcheck="false"
size="7" style="color: rgb(221, 221, 221); background-color: rgb(105, 105, 105);" type="text">
<div class="colourpicker-panel" style="display: none;">
<div class="colourpicker-slider colourpicker-sprite">
<div class="colourpicker-slider-picker" style="top: 150px;"></div>
</div>
<div class="colourpicker-alpha-slider">
<div class="colourpicker-alpha-inner-slider" style="background: rgba(0, 0, 0, 0) linear-gradient(rgb(105, 105, 105) 0px, rgba(105, 105, 105, 0) 100%) repeat scroll 0% 0%;"></div>
<div class="colourpicker-slider-picker" style="top: 0px;"></div>
</div>
<div class="colourpicker-grid">
<div class="colourpicker-grid-inner colourpicker-sprite" style="background-color: rgb(255, 0, 0);">
<div class="colourpicker-grid-inner-2"></div>
</div>
<div class="colourpicker-picker" style="top: 88px; left: 0px;"></div>
</div>
</div>
</div>'
codigo.color
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colorSelectorExample()
library("shiny")
library("shinyWidgets")
library("RColorBrewer")
ui <- fluidPage(
tags$h1("Spectrum color picker"),
br(),
spectrumInput(
inputId = "myColor",
label = "Pick a color:",
choices = list(
list('black', 'white', 'blanchedalmond', 'steelblue', 'forestgreen'),
as.list(brewer.pal(n = 9, name = "Blues")),
as.list(brewer.pal(n = 9, name = "Greens")),
as.list(brewer.pal(n = 11, name = "Spectral")),
as.list(brewer.pal(n = 8, name = "Dark2"))
),
options = list(`toggle-palette-more-text` = "Show more")
),
verbatimTextOutput(outputId = "res")
)
server <- function(input, output, session) {
output$res <- renderPrint(input$myColor)
}
shinyApp(ui, server)
colourWidget()
# Example 2
library(shiny)
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
4
colourPicker
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
library(shiny)
shinyApp(
ui = fluidPage(
strong("Selected colour:", textOutput("value", inline = TRUE)),
colourInput("col", "Choose colour", "red"),
h3("Update colour input"),
textInput("text", "New colour: (colour name or HEX value)"),
selectInput("showColour", "Show colour",
c("both", "text", "background")),
selectInput("palette", "Colour palette",
c("square", "limited")),
checkboxInput("allowTransparent", "Allow transparent", FALSE),
checkboxInput("returnName", "Return R colour name", FALSE),
actionButton("btn", "Update")
4
colourPicker
),
server = function(input, output, session) {
observeEvent(input$btn, {
updateColourInput(session, "col",
value = input$text, showColour = input$showColour,
allowTransparent = input$allowTransparent,
palette = input$palette,
returnName = input$returnName)
})
output$value <- renderText(input$col)
}
)
# Example 1
library(shiny)
shinyApp(
ui = fluidPage(
colourInput("col", "Choose colour", "red"),
plotOutput("plot")
),
server = function(input, output, session) {
output$plot <- renderPlot({
plot(1:10, col = input$col)
})
}
)
runApp()
runApp()
?PCA
shinyWidgets::animations
shinyWidgets::demoAirDatepicker()
shinyWidgetsGallery()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?hclust
?dist
runApp()
?hclust
?dist
runApp()
runApp()
runApp()
runApp()
runApp()
?kmeans
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datos
shiny::runApp()
install.packages("shiny", "shinyAce", "shinydashboard", "shinycssloaders", "shinyWidgets", "colourpicker", "shinyjs", "knitr", "DT", "promises", "ggplot2", "FactoMineR", "factoextra", "reshape", "corrplot", "dendextend", "scatterplot3d", "stringr")
install.packages("shiny", "shinyAce", "shinydashboard", "shinycssloaders", "shinyWidgets", "colourpicker", "shinyjs", "knitr", "DT", "promises", "ggplot2", "FactoMineR", "factoextra", "reshape", "corrplot", "dendextend", "scatterplot3d", "stringr")
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
datos
datos[, -c("Res")]
subset[datos, select = -("Res")]
datos
subset[datos, select = -(Res)]
subset[datos, select = -c(Res)]
subset[datos, select = Res]
subset[datos, select = "Res"]
subset[datos, select = Res]
subset[datos, select = "Res"]
head(datos)
subset(datos, select = "Res")
subset(datos, select = -c("Res"))
subset(datos, select = -c(Res))
subset(datos, select = -c(Res, GPA))
c("asd", "sdf", "qwe")
c("asd", "sdf", "qwe")
subset(datos, select = -c(Res GPA))
subset(datos, select = -Res GPA)
subset(datos, select = -Res)
as.formula(c("asd", "sdf", "qwe"))
paste(c("asd", "asd", "asd"))
paste(c("asd", "asd", "asd"), sep = ",")
paste(c("asd", "asd", "asd"), sep = " ")
paste(c("asd", "asd", "asd"), sep = ".")
paste("asd" "asd" "asd", sep = ".")
paste(c("asd", "asd", "asd"), sep = " ")
paste(c("asd", "asd", "asd"), collapse =  = " ")
paste(c("asd", "asd", "asd"), collapse = ",")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
code.desactivar(c("123", "123"))
colnames(datos)
datos <<- subset(datos, select = -c(Velocidad.Entrega,Numero.Estrellas))
datos
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
subset(iris, c(1,2))
subset(iris, c(Sepal.Length))
colnames(iris)
subset(iris, c(Sepal.Length))
subset(iris, select = c(Sepal.Length))
iris
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
nombre.filas
ruta
shiny::runApp()
sep.decimal
separador
sep.decimal
ruta
nombre.filas
ruta
ruta
paste0("datos.originales <<- read.csv('", ruta, "', header=",
encabezado, ", sep='", separador, "', dec = '", sep.decimal, "', row.names = 1) \n datos <<- datos.originales")
d
d<<-datos
View(d)
d<<-datos
View(d)
class(d$V2)
d<<-datos
View(d)
class(d$Matematicas)
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
##Recolección de Datos
library(stringi)
library(stringr)
library(rvest)
library(XML)
library(dplyr)
Friends<-read_html("https://en.wikipedia.org/wiki/List_of_Friends_episodes")
TablasFriends<-html_nodes(Friends, "table")
TablasFriends2<-Friends %>%
html_nodes("table") %>%
.[2:13] %>%
html_table(fill = TRUE)
head(TablasFriends2[[1]], 4)
TablasFriends2[[1]]<-TablasFriends2[[1]][-1,]
Season1<-TablasFriends2[[1]][,c(6,8)]
Season2<-TablasFriends2[[2]][,c(6,8)]
Season3<-TablasFriends2[[3]][,c(6,8)]
Season4<-TablasFriends2[[4]][,c(6,8)]
Season5<-TablasFriends2[[5]][,c(6,8)]
Season6<-TablasFriends2[[6]][,c(6,8)]
Season7<-TablasFriends2[[7]][,c(6,8)]
SeasonEsp1<-TablasFriends2[[8]][,c(3,4)]
names(SeasonEsp1)[2]<-"US viewers(millions)"
Season8<-TablasFriends2[[9]][,c(6,8)]
Season9<-TablasFriends2[[10]][,c(6,8)]
Season10<-TablasFriends2[[11]][,c(6,8)]
SeasonEsp2<-TablasFriends2[[12]][,c(3,4)]
names(SeasonEsp2)[2]<-"US viewers(millions)"
FriendsTotal<-bind_rows(Season1, Season2, Season3, Season4, Season5, Season6, Season7, Season8, Season9, Season10, SeasonEsp1, SeasonEsp2)
Fecha<-str_extract(FriendsTotal$`Original air date`, "\\d{1,4}[-/]\\d{1,2}[-/]\\d{1,4}")
Televidentes<-as.numeric(str_extract(FriendsTotal$`US viewers(millions)`, "\\d+\\.?\\d?")) * 100000
FriendsTotal<-cbind(FriendsTotal, Fecha)
FriendsTotal<-cbind(FriendsTotal, Televidentes)
FriendsTotal<-FriendsTotal[,-c(1,2)]
FriendsTotal$Fecha<-as.Date(FriendsTotal$Fecha)
FriendsTotal$Televidentes<-as.factor(FriendsTotal$Televidentes)
FriendsTotal2<-FriendsTotal[(order(as.Date(FriendsTotal$Fecha))),]
FriendsTotal2
##Calculo de Predicción
ER <- function(Pron,Real) {
return(sum(abs(Pron-Real))/sum(abs(Real)))
}
# mean squared error (MSE)
ECM<-function(Pred,Real) {
N<-length(Real)
ss<-sum((Real-Pred)^2)
return((1/N)*ss)
}
PFA <- function(Pron,Real) {
Total<-0
N<-length(Pron)
for(i in 1:N) {
if(Pron[i]>Real[i])
Total<-Total+1
}
return(Total/N)
}
PTFA <- function(Pron,Real) {
Total<-0
SReal<-0
N<-length(Pron)
for(i in 1:N) {
if(Pron[i]>Real[i]) {
Total<-Total+(Pron[i]-Real[i])
SReal<-SReal+abs(Real[i])
}
}
if(Total==0)
SReal=1
return(Total/SReal)
}
calibrar<-function(serie.aprendizaje,serie.testing) {
error.c<-Inf
alpha.i<-0.1
while(alpha.i<=1) {
beta.i<-0
while(beta.i<=1) {
gamma.i<-0
while(gamma.i<=1) {
mod.i<-HoltWinters(serie.aprendizaje,alpha=alpha.i,beta=beta.i,gamma=gamma.i)
res.i<-predict(mod.i,n.ahead=length(serie.testing))
error.i<-sqrt(ECM(res.i,serie.testing))
if(error.i<error.c) {
error.c<-error.i
mod.c<-mod.i
}
gamma.i<-gamma.i+0.1
}
beta.i<-beta.i+0.1
}
alpha.i<-alpha.i+0.1
}
return(mod.c)
}
library(timeDate)
library(xts)
library(forecast)
library(dygraphs)
FriendsTS<-xts(FriendsTotal2$Televidentes, order.by = FriendsTotal2$Fecha)
dygraph(FriendsTS) %>%
dyRangeSelector()
#Holt-Winters
top<-round(length(FriendsTS)*0.9, digits = 0)
Sampling<-seq(1:top)
Due.Aprendizaje<-FriendsTS[Sampling]
Due.Aprendizaje<-as.data.frame(Due.Aprendizaje)
Due.Aprendizaje<-ts(Due.Aprendizaje$V1, start = c(1994,1), frequency = 24)
Due.Testing<-FriendsTS[-Sampling]
Due.Testing<-as.data.frame(Due.Testing)
Due.Testing<-ts(Due.Testing$V1, start = c(2002,1), frequency = 24)
CalibrarHWDue<-calibrar(Due.Aprendizaje, Due.Testing)
res.Due.HW<-predict(CalibrarHWDue, n.ahead=length(Due.Testing))
er.Due.HW<-ER(res.Due.HW, Due.Testing)
pfa.Due.HW<-PFA(res.Due.HW, Due.Testing)
ecm.Due.HW<-sqrt(ECM(res.Due.HW, Due.Testing))
ptfa.Due.HW<-PTFA(res.Due.HW, Due.Testing)
ERR.Due.HW<-c(er.Due.HW, pfa.Due.HW, ecm.Due.HW, ptfa.Due.HW)
CalibrarHWDue
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
FriendsTS<-ts(FriendsTotal2$Televidentes, order.by = FriendsTotal2$Fecha)
FriendsTS<-ts(FriendsTotal2$Televidentes)
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
FriendsTS<-ts(FriendsTotal2$Televidentes, frequency = 4)
FriendsTS
modelo.Due.HW<-HoltWinters(FriendsTS, alpha = 0.1, beta = 0.2, gamma = 0.1)
modelo.Due.HW
