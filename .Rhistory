install.packages("devtools")
pi_key <- "iyWpkuisuCh4HrtAn2Veco2Uu"
api_secret <- "CVxn5jR8VTGSoKyjjt9TJCYk4Zf06oA4nF0kaRvkDcwjomSvK9"
library(rtweet)
library(twitteR)
library(devtools)
token <- create_token(app = "TweeterCatcher",
consumer_key = "iyWpkuisuCh4HrtAn2Veco2Uu",
consumer_secret = "CVxn5jR8VTGSoKyjjt9TJCYk4Zf06oA4nF0kaRvkDcwjomSvK9")
pi_key <- "l4Z9PVT3IieL3QMyZAWlAHcQD"
api_secret <- "zh8TYGvefn9OOfCAVbmaWti1ttuxOQjN25ojRpM9fkVUoHIinj"
library(rtweet)
library(twitteR)
library(devtools)
token <- create_token(app = "TweeterCatcher",
consumer_key = "l4Z9PVT3IieL3QMyZAWlAHcQD",
consumer_secret = "zh8TYGvefn9OOfCAVbmaWti1ttuxOQjN25ojRpM9fkVUoHIinj")
maduro <- search_tweets("Nicolas Maduro",lang ="es",n=1000)
View(maduro)
maduro$text
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit$text
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
tuits.limpios <- lapply(maduro, limpiar.tuits)
texto <- maduro$text
texto
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
list(texto= texto, fecha = as.character(tuit$created))
list(texto= texto, fecha = as.character(maduro$created))
maduro <- search_tweets("Nicolas Maduro",lang ="es",n=1000)
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
print("LLEGA")
#Eliminar los links
texto <- tuit$text
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
print("LLEGA")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
print("LLEGA")
#Eliminar los links
texto <- tuit$text
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
print("LLEGA")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
print("LLEGA")
#Eliminar los links
texto <- tuit$text
print("LLEGA")
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
print("LLEGA")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
lapply(maduro, limpiar.tuits)
texto <- maduro$text
maduro - searchTwitteR("Fabricio Alvarado",lang ="es",n=1000)
maduro <- searchTwitteR("Fabricio Alvarado",lang ="es",n=1000)
setup_twitter_oauth(api_key,api_secret)
api_key <- "l4Z9PVT3IieL3QMyZAWlAHcQD"
api_secret <- "zh8TYGvefn9OOfCAVbmaWti1ttuxOQjN25ojRpM9fkVUoHIinj"
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)
maduro <- searchTwitteR("Fabricio Alvarado",lang ="es",n=1000)
maduro <- search_tweets("Nicolas Maduro",lang ="es",n=1000)
api_key <- "l4Z9PVT3IieL3QMyZAWlAHcQD"
api_secret <- "zh8TYGvefn9OOfCAVbmaWti1ttuxOQjN25ojRpM9fkVUoHIinj"
setup_twitter_oauth(api_key,api_secret)
api_key<-"shzkOb9hGEKH4CzGSJVNSkpbn"
api_secret<-"SbnR8iIhLR59F7u6bOCnAIQ19QRjCftaBqyUrttMZbfs4tFQIn"
setup_twitter_oauth(api_key,api_secret)
maduro
maduro$text
lapply(maduro, print)
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit$text
}
lapply(maduro, limpiar.tuits)
maduro$text
maduro["text"]
maduro$"text"
maduro[text]
maduro["text"]
maduro$text[1]
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit["text"]
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit["text"]
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit$created))
}
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit["text"]
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit["created"]))
}
lapply(maduro, limpiar.tuits)
limpiar.tuits <- function(tuit){
#Eliminar los links
texto <- tuit["text"]
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(tuit["created"]))
}
lapply(maduro, limpiar.tuits)
maduro
maduro[[1]]
maduro$text
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)
api_key<-"shzkOb9hGEKH4CzGSJVNSkpbn"
api_secret<-"SbnR8iIhLR59F7u6bOCnAIQ19QRjCftaBqyUrttMZbfs4tFQIn"
api_key <- "l4Z9PVT3IieL3QMyZAWlAHcQD"
api_secret <- "zh8TYGvefn9OOfCAVbmaWti1ttuxOQjN25ojRpM9fkVUoHIinj"
setup_twitter_oauth(api_key,api_secret)
api_key<-"wy81ylKmqatDltVTnt8Y94R8e"
api_secret<-"6BWWNljvnMd5SokE2jnvjZwXQNac3jBOnOrkjYIWQ5SiUoh1Uu"
setup_twitter_oauth(api_key,api_secret)
setup_twitter_oauth(api_key,api_secret)
detach("package:twitteR", unload=TRUE)
library("twitteR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
detach("package:rtweet", unload=TRUE)
detach("package:twitteR", unload=TRUE)
library("twitteR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
setup_twitter_oauth(api_key,api_secret)
maduro
token <- create_token(app = "TweeterCatcher",
consumer_key = "iyWpkuisuCh4HrtAn2Veco2Uu",
consumer_secret = "CVxn5jR8VTGSoKyjjt9TJCYk4Zf06oA4nF0kaRvkDcwjomSvK9")
library(rtweet)
token <- create_token(app = "TweeterCatcher",
consumer_key = "iyWpkuisuCh4HrtAn2Veco2Uu",
consumer_secret = "CVxn5jR8VTGSoKyjjt9TJCYk4Zf06oA4nF0kaRvkDcwjomSvK9")
api_key
api_secret
token <- create_token(app = "TweeterCatcher",
consumer_key = "wy81ylKmqatDltVTnt8Y94R8e",
consumer_secret = "6BWWNljvnMd5SokE2jnvjZwXQNac3jBOnOrkjYIWQ5SiUoh1Uu")
maduro <- search_tweets("Nicolas Maduro",lang ="es",n=1000)
maduro$created_at
limpiar.tuits <- function(texto, fecha){
#Eliminar los links
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
#Retorna el texto limpio y la fecha de publicación
list(texto= texto, fecha = as.character(fecha))
}
View(maduro)
str(maduro)
maduro
limpiar.tuits <- function(texto){
#Eliminar los links
texto <- str_replace_all(texto, "(f|ht)(tp)(s?)(://)(.*)[.|/](.*)", " ")
#Elimina la referencia a un retuit
texto <- str_replace_all(texto, "(RT|via)((?:\\b\\W*@\\w+)+)", " ")
#Elimina los hashtag
texto <- str_replace_all(texto, "#\\w+", " ")
#Elimina la referencia a usuarios
texto <- str_replace_all(texto, "@\\w+", " ")
#Elimina los signos de puntuación
texto <- str_replace_all(texto, "[[:punct:]]", " ")
# Elimina los números
texto <- str_replace_all(texto,"[[:digit:]]", " ")
#Elimina los espacios innecesarios
texto <- str_replace_all(texto,"[ \t] {2,}", " ")
texto <- str_replace_all(texto,"^\\s+|\\s+$","")
texto <- str_replace_all(texto, "\\n", "")
texto <- tolower(texto)
texto
}
maduro %>% mutate(text = limpiar.tuits(text))
library(dplyr)
maduro %>% mutate(text = limpiar.tuits(text))
maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text)
extraer.puntaje <- function(tuits, palabras.positivas,palabras.negativas) {
# Inicio de la función
puntajes <-  lapply(tuits,
function(tuit, palabras.positivas, palabras.negativas) {
# Extraemos el texto del tuit
texto <- tuit$texto
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
# Se retorna el texto,puntaje y la fecha de publicación
return(list(texto = tuit$texto,calificacion = puntaje,fecha = tuit$fecha))
}, palabras.positivas, palabras.negativas)
# Se convierte a un data.frame y se da formato a las columnas.
salida <- data.frame(matrix(unlist(puntajes),ncol = 3,byrow = T),stringsAsFactors = F)
colnames(salida) <- c("texto","puntaje","fecha")
salida["fecha"] <- ymd_hms(salida[,3])
salida["puntaje"] <- as.integer(salida[,2])
return(salida)
# Fin de la función
}
extraer.puntaje(maduro, c("bueno"), c("malo"))
maduro$text
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text)
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(text = texto)
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text)
aux
extraer.puntaje(maduro, c("bueno"), c("malo"))
extraer.puntaje <- function(tuits, palabras.positivas,palabras.negativas) {
# Inicio de la función
texto <- tuits$texto
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
tuits$puntaje <- puntaje
return(tuits)
# Fin de la función
}
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text)
extraer.puntaje(maduro, c("bueno"), c("malo"))
extraer.puntaje(aux, c("bueno"), c("malo"))
extraer.puntaje(aux, c("bueno"), c("Maduro"))
extraer.puntaje(aux, c("bueno"), c("maduro"))
extraer.puntaje <- function(tuits, palabras.positivas,palabras.negativas) {
browser()
# Inicio de la función
texto <- tuits$texto
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
tuits$puntaje <- puntaje
return(tuits)
# Fin de la función
}
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text)
extraer.puntaje(aux, c("bueno"), c("maduro"))
# Inicio de la función
texto <- tuits$texto
texto
extraer.puntaje <- function(tuits, palabras.positivas,palabras.negativas) {
browser()
# Inicio de la función
texto <- tuits$texto
puntaje <- lapply(texto, function(texto){
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
})
tuits$puntaje <- puntaje
return(tuits)
# Fin de la función
}
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text)
extraer.puntaje(aux, c("bueno"), c("maduro"))
# Inicio de la función
texto <- tuits$texto
puntaje <- lapply(texto, function(texto){
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
})
puntaje
extraer.puntaje <- function(tuits, palabras.positivas,palabras.negativas) {
# Inicio de la función
texto <- tuits$texto
puntaje <- lapply(texto, function(texto){
# Separamos el texto en palabras independientes
palabras = unlist(str_split(texto, '\\s+'))
# Conteo de palabras positivas
positivos = !is.na(match(palabras, palabras.positivas))
# Conteo de palabras negativas
negativos = !is.na(match(palabras, palabras.negativas))
# Diferencia entre palabras positivas y negativas
puntaje = sum(positivos) - sum(negativos)
})
tuits$puntaje <- unlist(puntaje)
return(tuits)
# Fin de la función
}
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text)
extraer.puntaje(aux, c("bueno"), c("maduro"))
extraer.puntaje(maduro, c("entrega"), c("malo"))
extraer.puntaje(aux, c("entrega"), c("malo"))
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text, fecha = created_at)
extraer.puntaje(aux, c("bueno"), c("maduro"))
aux <-maduro %>% mutate(text = limpiar.tuits(text), created_at = ymd(created_at)) %>% select(created_at,text) %>% rename(texto = text, fecha = created_at)
aux <-maduro %>% mutate(text = limpiar.tuits(text)) %>% select(created_at,text) %>% rename(texto = text, fecha = created_at)
extraer.puntaje(aux, c("bueno"), c("maduro"))
puntajes <- puntajes %>% add_column(categoria = case_when(.$puntaje  == 0 ~ "Neutro",
.$puntaje < 0 ~ "Negativo",
T ~ "Positivo"))
puntajes <- extraer.puntaje(aux, c("bueno"), c("maduro"))
puntajes <- puntajes %>% add_column(categoria = case_when(.$puntaje  == 0 ~ "Neutro",
.$puntaje < 0 ~ "Negativo",
T ~ "Positivo"))
puntajes <- puntajes %>% cbind(categoria = case_when(.$puntaje  == 0 ~ "Neutro",
.$puntaje < 0 ~ "Negativo",
T ~ "Positivo"))
puntajes
ggplot(puntajes,aes(x = categoria, fill = categoria)) +
geom_bar(position = "dodge") +
labs(title = "Comparativa de los teléfonos Iphone 10 y Samsung 8s pro",
y = "cantidad de casos") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(puntajes,aes(x = categoria, fill = categoria)) +
geom_bar(position = "fill") +
labs(title = "Comparativa de los teléfonos Iphone 10 y Samsung 8s pro",
y = "cantidad de casos") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(puntajes,aes(x = categoria, fill = categoria)) +
geom_bar() +
labs(title = "Comparativa de los teléfonos Iphone 10 y Samsung 8s pro",
y = "cantidad de casos") +
theme_minimal() +
theme(legend.position = "bottom")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
