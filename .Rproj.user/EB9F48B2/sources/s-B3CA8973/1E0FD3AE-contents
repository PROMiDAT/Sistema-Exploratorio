"","x"
"1","---
title: 'Untitled'
author: 'PROMIDAT'
date: Sys.Date()
output:
  keep_md: true 
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Carga de librerias Necesarias
```{r message=FALSE, warning=FALSE}
library(promises)
library(ggplot2)
library(FactoMineR)
library(factoextra)
library(reshape)
library(corrplot)
library(dendextend)
library(scatterplot3d)
library(stringr)
```

# Funciones

```{r}
var.numericas <- function(data){
  if(is.null(data)) return(NULL)
                res <- subset(data, select = sapply(data, class) %in% c('numeric', 'integer'))
                return(res)
}

var.categoricas <- function(data){
if(is.null(data)) return(NULL)
res <- base::subset(data, select = !sapply(data, class) %in% c('numeric', 'integer'))
return(res)
}

datos.disyuntivos <- function(data){
  if(is.null(data)) return(NULL)
  cualitativas <- var.categoricas(data)
  cuantitativas <- var.numericas(data)
  for (variable in colnames(cualitativas)) {
    for (categoria in unique(data[, variable])) {
      nueva.var <- as.numeric(cualitativas[, variable] == categoria)
      cuantitativas <- cbind(cuantitativas, nueva.var)
      colnames(cuantitativas)[length(colnames(cuantitativas))] <- paste0(variable, '.', categoria)
    }
  }
  return(cuantitativas)
}

distribucion.numerico <<- function(var, nombre.var){
  color <- rgb(sample(0:255, 1), sample(0:255, 1), sample(0:255, 1), 140, maxColorValue = 255)
  nf <- graphics::layout(mat = matrix(c(1, 2), 2, 1, byrow=TRUE),  height = c(3,1))
  par(mar=c(3.1, 3.1, 1.1, 2.1))
  hist(var, col = color, border=F, main = paste0('Distribución y atipicidad de la variable ', nombre.var), axes=F)
  axis(1, col=par('bg'), col.ticks='grey81', lwd.ticks=1, tck=-0.025)
  axis(2, col=par('bg'), col.ticks='grey81', lwd.ticks=1, tck=-0.025)
  boxplot(var, col = color, boxcol = color, boxlty = 1, boxlwd = 3, boxwex = 1.5,
          edcol = color, medlty = 1, medlwd = 8, medcol = color, whiskcol = color, whisklty = 3,
          staplecol = color, staplelty = 1, staplelwd = 3, horizontal=TRUE, outline=TRUE, 
          frame=F, whisklwd = 2.5, outpch = 20, outcex = 1.5, outcol = 'red', axes=F)
}

distribucion.categorico <<- function(var){
  colores <- sapply(c(1:length(levels(var))), function(i) rgb(sample(0:255, 1), sample(0:255, 1), sample(0:255, 1), 180, maxColorValue = 255))
  data <- data.frame(label = levels(var), value = summary(var))
  ggplot(data, aes(label, value)) +
  geom_bar(stat = 'identity', fill = colores) +
      geom_text(aes(label = value, y = value), vjust = -0.5, size = 4) +
      theme_minimal() +
      labs(title = 'Distribución', y = 'Cantidad de casos', x = 'Categorias')
}

lead <- function(x){
  out <- c(x[-seq_len(1)], rep(NA, 1))
  return(out)
}
codo.jambu <<- function(data. = NULL, k. = NA_integer_, nstart. = 200, iter.max. = 5000, h. = 1.5){
  params <- list(k = k., data = list(data.))
  params <- purrr::cross(params)
  models <- purrr::map(params, ~future::future(kmeans(x = .$data, centers = .$k, iter.max = iter.max., nstart = nstart.)))
  models <- future::values(models)
  tot_withinss <- purrr::map_dbl(models, 'tot.withinss') 
  model_index <- head(which(!tot_withinss/lead(tot_withinss) > h.), 1)
  if(length(model_index) == 0)
     model_index <- which.min(tot_withinss)
                
  best_model <- models[[model_index]]
  res.plot <- ggplot() + geom_point(aes(x = k., y = tot_withinss), size = 2) + 
  geom_line(aes(x = k., y = tot_withinss), size = 1) + 
  geom_vline(xintercept = k.[model_index], linetype='dashed', color = 'blue', size=0.8) + 
  theme_minimal() + labs(x = 'k', y = 'Inercia Intra-Clase') +
  scale_x_continuous(breaks = seq(1, length(k.), 1)) + scale_y_continuous(labels = scales::comma) 
  return(res.plot)
}

calc.centros <<- function(data, cant.cluster, porcentaje = FALSE, metodo = 'complete') {
  modelo <- hclust(dist(data), method = metodo)
  clusters <- cutree(modelo, k=cant.cluster)
  res <- vector(length = length(unique(clusters)), mode = 'list')
  for (i in unique(clusters)){ 
    res[[i]] <- colMeans(data[clusters == i, ])
  }
  res <- as.data.frame(do.call('rbind', res))
  if(porcentaje){
      res <- apply(res, 2, function(i) scales::rescale(i, to = c(0, 100)))
      res <- as.data.frame(res)
  }
  return(res)
}

centros.horizontal.todos <<- function(centros){
  colnames(centros) <- sapply(c(1:ncol(centros)), function(i) paste0('Cluster ', i))
  var <- row.names(centros)
  centros <- cbind(centros, var)
  centros <- melt(centros, id.vars = 'var')
  ggplot(centros, aes(x=var, y=value)) + geom_bar(stat='identity', position='dodge') +
     scale_fill_discrete(name='Variable') + labs(x = '', y = '') + facet_wrap(~variable) + coord_flip() +
     theme_minimal() + theme(text = element_text(size = 20))
}

centros.vertical.todos <<- function(centros){
  cluster <- c(1:nrow(centros))
  centros <- cbind(centros, cluster)
  centros <- melt(centros, id.vars = 'cluster')
  ggplot(centros, aes(x=variable, y=value, fill=factor(cluster))) + geom_bar(stat='identity', position='dodge') +
                scale_fill_discrete(name='Clúster') + labs(x = '', y = '')
}

coord_radar <<- function (theta = 'x', start = 0, direction = 1) {
  theta <- match.arg(theta, c('x', 'y'))
  r <- if (theta == 'x') 'y' else 'x'
  ggproto('CordRadar', CoordPolar, theta = theta, r = r, start = start, direction = sign(direction), is_linear = function(coord) TRUE)
}

centros.radar <<- function(centros){
  res <- melt(t(centros), varnames = c('variables', 'clusteres'))
  res <- res[order(res$variables, decreasing = F), ]
  res$clusteres <- as.character(res$clusteres)
  ggplot(res, aes(x = variables, y = value)) +
    geom_polygon(aes(group = clusteres, color = clusteres, fill = clusteres), alpha=0.3, size = 1, show.legend = FALSE) +
    geom_point(aes(group = clusteres, color = clusteres), size = 3) + 
    theme( panel.background = element_rect(fill = 'transparent'), 
           plot.background = element_rect(fill = 'transparent'),
           panel.grid.major = element_line(size = 0.5, linetype = 'solid', colour = '#dddddd'),
          axis.text.x = element_text(size = rel(1.2)),
          axis.text.y = element_blank(),
          axis.ticks = element_blank()) +
    scale_y_continuous(limits=c(-10, 100), breaks=c(0, 25, 50, 75, 100)) +
    ggtitle('Comparación de Clustéres') + xlab('') + ylab('') +
    geom_text(aes(x = 0.5, y = 0, label = '0%'), size = 3.5, colour = '#dddddd', family = 'Arial') + 
    geom_text(aes(x = 0.5, y = 25, label = '25%'), size = 3.5, colour = '#dddddd', family = 'Arial') + 
    geom_text(aes(x = 0.5, y = 50, label = '50%'), size = 3.5, colour = '#dddddd', family = 'Arial') + 
    geom_text(aes(x = 0.5, y = 75, label = '75%'), size = 3.5, colour = '#dddddd', family = 'Arial') + 
    geom_text(aes(x = 0.5, y = 100, label = '100%'), size = 3.5, colour = '#dddddd', family = 'Arial') + 
    coord_radar()
}
```"
