---
title: "Tarea #1"
output: 
   html_document:
     css: promidat.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

<div id="bg">
  <img src="Logo.png" alt="">
</div>  

#Carga de librerias Necesarias
```{r message=FALSE, warning=FALSE}
library(lubridate)
library(dygraphs)
library(knitr)
library(itsmr)
library(nortest)
library(xts)
library(ggplot2)
library(ggfortify)
```

#{.tabset .tabset-fade}
##Ejercicio 1 
###[5 puntos] ¿Explique porqué los datos de la tabla incluida en el archivo OilPrice.csv no son una serie de tiempo?

####Los datos no están de forma equiespaciada (a intervalos de tiempo iguales), notese que los intervalos entre las fechas varian entre un día, 3 días, 4 días, entre otros. NOTA: si bien no se puede realizar la serie de tiempo tomando los datos originales, si se podría realizar una especie de "arreglo" para poder trabajar los datos como una serie de tiempo. {#respuesta}

##Ejercicio 2
###Para los datos sobre la “Producción industrial de Australia por trimestre” que va del 4to trimestre de 1975 al 3er trimestre de 1991 que esta ́ en el archivo Producción industrial de Australia por trimestre.csv realice los siguiente:
####a) Conviértala en Serie de Tiempo y grafique usando el comando plot de R.
```{r}
datos <- read.table(file = "DatosV4/Producción industrial de Australia por trimestre.csv", sep = ";", dec = ".", row.names = 1, header = T)
datos <- as.data.frame(t(datos))
datos <- ts(datos$Industrial_production_Austria_quarterly, start = c(1975, 4), frequency = 4)
plot(datos, type = "o")
dygraph(datos) %>% dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

####b) Usando todos los tipos de test vistos en clase verifique la normalidad de los residuos de esta serie.
#####Test Normalidad
######Hipótesis:
######H0: La muestra proviene de una distribución normal.
######H1: La muestra no proviene de una distribución normal.
######Para pruebas de normalidad siempre se plantean así las hipótesis.
######Nivel de Significancia: El nivel de significancia que se trabajará es de 0.05. Alfa=0.05
######Criterio de Decisión
######Si P < Alfa Se rechaza Ho
######Si p >= Alfa No se rechaza Ho

```{r}
h <- hist(datos, probability = T, main = "Análisis gráfico de normalidad", xlab = "", ylab = "",col = "red")
lines(density(datos, na.rm = T), lwd = 2, col = "green")
mu <- mean(datos, na.rm = T)
sigma <- sd(datos,na.rm = T)
x <- seq(min(h$mids,na.rm = T), max(h$mids,na.rm = T), length = length(datos))
y <- dnorm(x, mu, sigma)
lines(x, y, lwd = 2, col = "blue")

qqnorm(datos)
qqline(datos, col = "red")

nortest::pearson.test(diff(datos))
nortest::lillie.test(diff(datos))
nortest::cvm.test(diff(datos))
```
####Conclusión:{.respuesta}
#####Los tres test nos dan un valor de p<0.05 (p-value<0.05) por lo que se rechaza Ho. Es decir, podemos afirmar que la “serie” no sigue una distribución normal.{.respuesta}

####c) Realice un suavizado lineal usando a = 4 y a = 6 grafique usando el comando plot de R.
```{r}
plot(datos, type="l")
st.1 <- stats::filter(datos, filter=rep(1/9, 9)) 
st.2 <- stats::filter(datos, filter=rep(1/13, 13))
lines(st.1, col = "red")
lines(st.2, col = "purple")
```

```{r}
datos.suavizado <- cbind(datos, st.1, st.2)
head(datos.suavizado)

dygraph(datos.suavizado, ylab="Precio de cierre", main="Suavizado Lineal") %>%
  dySeries("datos",label="Datos") %>%
  dySeries("st.1",label="Datos_S9") %>%
  dySeries("st.2",label="Datos_S13") %>%
  dyOptions(colors = c("blue","brown","red")) %>%
  dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

##Ejercicio 3 
###[15 puntos] Repita el ejercicio anterior para los datos en el archivo CO2.csv, usando la columna CO2 la cual consiste de las concentraciones mensuales de CO2 de Mauna Loa en micro mol de CO2 por mol (ppm). Se tienen datos en el archivo desde enero de 1958 hasta diciembre del 2017, pero se deben usar solamente los datos desde enero de 1965 hasta octubre de 2017.
####a) Conviértala en Serie de Tiempo y grafique usando el comando plot de R.
####Desde 1958
```{r}
datos <- read.table(file = "DatosV4/CO2.csv", sep = ",", dec = ".", header = T)
datos <- ts(datos$CO2, start = c(1958, 1), frequency = 12)
plot(datos)
dygraph(datos) %>% dyRangeSelector()
```

####Desde 1965
```{r}
datos <- read.table(file = "DatosV4/CO2.csv", sep = ",", dec = ".", header = T)
datos <- datos[datos$Yr >= 1965, ]
datos <- ts(datos$CO2, start = c(1965, 1), frequency = 12)
plot(datos)
dygraph(datos) %>% dyRangeSelector()
```

####b) Usando todos los tipos de test vistos en clase verifique la normalidad de los residuos de esta serie.
#####Test Normalidad
######Hipótesis:
######H0: La muestra proviene de una distribución normal.
######H1: La muestra no proviene de una distribución normal.
######Para pruebas de normalidad siempre se plantean así las hipótesis.
######Nivel de Significancia: El nivel de significancia que se trabajará es de 0.05. Alfa=0.05
######Criterio de Decisión
######Si P < Alfa Se rechaza Ho
######Si p >= Alfa No se rechaza Ho

```{r}
h <- hist(datos, probability = T, main = "Análisis gráfico de normalidad", xlab = "", ylab = "", col = "red")
lines(density(datos, na.rm = T), lwd = 2, col = "green")
mu <- mean(datos, na.rm = T)
sigma <- sd(datos, na.rm = T)
x <- seq(min(h$mids, na.rm = T), max(h$mids,na.rm = T), length = length(datos))
y <- dnorm(x, mu, sigma)
lines(x, y, lwd = 2, col = "blue")

qqnorm(datos)
qqline(datos, col = "red")

nortest::pearson.test(diff(datos))
nortest::lillie.test(diff(datos))
nortest::cvm.test(diff(datos))
```
####Conclusión:{.respuesta}
#####Los tres test nos dan un valor de p<0.05 (p-value<0.05) por lo que se rechaza Ho. Es decir, podemos afirmar que la “serie” no sigue una distribución normal.{.respuesta}

####c) Realice un suavizado lineal usando a = 4 y a = 6 grafique usando el comando plot de R.
```{r}
plot(datos, type="l")
st.1 <- stats::filter(datos, filter=rep(1/9, 9)) 
st.2 <- stats::filter(datos, filter=rep(1/13, 13))
lines(st.1, col = "red")
lines(st.2, col = "purple")
```

```{r}
datos.suavizado <- cbind(datos, st.1, st.2)
head(datos.suavizado)

dygraph(datos.suavizado, ylab="Precio de cierre", main="Suavizado Lineal") %>%
  dySeries("datos",label="Datos") %>%
  dySeries("st.1",label="Datos_S9") %>%
  dySeries("st.2",label="Datos_S13") %>%
  dyOptions(colors = c("blue", "brown", "red")) %>%
  dyRangeSelector()
```

##Ejercicio 4
###[15 puntos] Convierta en series de tiempo los siguientes datos del paquete itsmr; luego grafique usando el comando plot de R y el paquete dygraphs: 
####Funcniones para calcular el número de dia
```{r}
es.bisiesto = function(anio) {
  anio <- ifelse(anio %% 100 == 0, anio/100, anio)  
  return(ifelse(anio %% 4  == 0, TRUE, FALSE))
}            

calc.dia <- function(year, month = 1, day = 1){
  dias.anio <- list(Enero = lapply(c(1:31), function(i) list(Nombre = paste0("Enero ", i), Dia = i, Dia.Bisiesto = i)),
                    Febrero = lapply(c(1:29), function(i) list(Nombre = paste0("Febrero ", i), Dia = 31 + i, Dia.Bisiesto = 31 + i)),
                    Marzo = lapply(c(1:31), function(i) list(Nombre = paste0("Marzo ", i), Dia = 60 - 1 + i, Dia.Bisiesto = 60 + i)),
                    Abril = lapply(c(1:30), function(i) list(Nombre = paste0("Abril ", i), Dia = 91 - 1 + i, Dia.Bisiesto = 91 + i)),
                    Mayo = lapply(c(1:31), function(i) list(Nombre = paste0("Mayo ", i), Dia = 121 - 1 + i, Dia.Bisiesto = 121 + i)),
                    Junio = lapply(c(1:30), function(i) list(Nombre = paste0("Junio ", i), Dia = 152 - 1 + i, Dia.Bisiesto = 152 + i)),
                    Julio = lapply(c(1:31), function(i) list(Nombre = paste0("Julio ", i), Dia = 182 - 1 + i, Dia.Bisiesto = 182 + i)),
                    Agosto = lapply(c(1:31), function(i) list(Nombre = paste0("Agosto ", i), Dia = 213 - 1 + i, Dia.Bisiesto = 213 + i)),
                    Setiembre = lapply(c(1:30), function(i) list(Nombre = paste0("Setiembre ", i), Dia = 244 - 1 + i, Dia.Bisiesto = 244 + i)),
                    Octubre = lapply(c(1:31), function(i) list(Nombre = paste0("Octubre ", i), Dia = 274 - 1 + i, Dia.Bisiesto = 274 + i)),
                    Noviembre = lapply(c(1:30), function(i) list(Nombre = paste0("Noviembre ", i), Dia = 305 - 1 + i, Dia.Bisiesto = 305 + i)),
                    Diciembre = lapply(c(1:31), function(i) list(Nombre = paste0("Diciembre ", i), Dia = 335 - 1 + i, Dia.Bisiesto = 335 + i)))
  
  if(es.bisiesto(year))
    return(list(Nombre = dias.anio[month][[1]][[day]]$Nombre, Dia = dias.anio[month][[1]][[day]]$Dia.Bisiesto))
  else{
    return(list(Nombre = dias.anio[month][[1]][[day]]$Nombre, Dia = dias.anio[month][[1]][[day]]$Dia))
  }
}
```

####dowj (78 Dow Jones utilities index, August 28 to December 18, 1972)
```{r}
fechas <- ymd("1972-08-28") + days(0:(length(dowj)*2))
fechas <- fechas[!wday(fechas) %in% c(1,7)]
fechas <- fechas[1:(length(dowj))]
serie.dowj <- xts(dowj, fechas)
plot(serie.dowj)
dygraph(serie.dowj, ylab="", main="") %>% dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

####strikes (30 USA union strikes, 1951 to 1980) 
```{r}
serie.strikes <- ts(strikes, start = c(1951), frequency = 1)
plot(serie.strikes)
dygraph(serie.strikes, ylab="", main="") %>% dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

####Sunspots (100 Number of sunspots, 1770 to 1869) 
```{r}
serie.Sunspots <- ts(Sunspots, start = c(1770), frequency = 1)
plot(serie.Sunspots)
dygraph(serie.Sunspots, ylab="", main="") %>% dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

####wine (142 Australian red wine sales, January 1980 to October 1991)
```{r}
serie.wine <- ts(wine, start = c(1980), frequency = 12)
plot(serie.Sunspots)
dygraph(serie.wine, ylab="", main="") %>% dyRangeSelector() %>% dyOptions(drawPoints = TRUE, pointSize = 2)
```

##Ejercicio 5                
###[15 puntos] Para los datos en el archivo Tipo de cambio USA-CR.csv que contiene el tipo de cambio entre el dólar estadounidense y el colón costarricense desde el 1/1/1983 hasta el 28/11/2017 realice lo siguiente:
####a) Extraiga y convierta en series de tiempo el precio de compra y de venta del colón respecto a dólar, luego grafique ambas series usando el comando plot de R y el paquete dygraphs.
```{r}
datos <- read.table(file = "DatosV4/USA-CR.csv", sep = ";", dec = ",", header = T)
datos$FECHA <- as.Date(datos$FECHA, format = "%d/%m/%Y")
datos.compra <- xts(datos$COMPRA, datos$FECHA)
datos.compra.ts <- ts(datos$COMPRA, start = c(1983,1), frequency = 365)
datos.venta <- xts(datos$VENTA, datos$FECHA)
datos.venta.ts <- ts(datos$VENTA, start = c(1983,1), frequency = 365)

plot(datos.compra.ts, type="l", col = "red", main = "Tipo de Cambio entre el $ y el ¢", ylab = "")
lines(datos.venta.ts, type="l", col = "blue")
legend("bottomright", inset=.05, title="Tipo Cambio", c("Compra","Venta"), fill=c("red", "blue"))

dygraph(cbind(datos.compra, datos.venta), ylab = "Valor", main = "Tipo de Cambio entre el $ y el ¢") %>%
  dySeries("..1",label="Compra") %>%
  dySeries("..2",label="Venta") %>%
  dyOptions(colors = c("red","blue")) %>% dyRangeSelector()
```

####b) Para ambas series realice un suavizado lineal usando a = 4, a = 6 y a = 10. Grafique usando el comando plot de R y el paquete dygraphs.
#####Compra
```{r}
plot(datos.compra.ts, type="l", col = "red", main = "Tipo de Cambio entre el $ y el ¢ (Suavizado)", ylab = "")
st.1 <- stats::filter(datos.compra.ts, filter=rep(1/9, 9)) 
st.2 <- stats::filter(datos.compra.ts, filter=rep(1/13, 13))
st.3 <- stats::filter(datos.compra.ts, filter=rep(1/21, 21))
lines(st.1, col = "blue")
lines(st.2, col = "green")
lines(st.3, col = "brown")

st.1 <- xts(st.1, datos$FECHA)
st.2 <- xts(st.2, datos$FECHA)
st.3 <- xts(st.3, datos$FECHA)
suavizado <- cbind(datos.compra, st.1, st.2, st.3)
dygraph(suavizado, ylab = "Valor", main = "Tipo de Cambio entre el $ y el ¢") %>%
  dySeries("..1",label="Compra") %>%
  dySeries("..2",label="Datos_S9") %>%
  dySeries("..3",label="Datos_S13") %>%
  dySeries("..4",label="Datos_S21") %>%
  dyOptions(colors = c("red","blue","green","black")) %>% dyRangeSelector()
```

#####Venta
```{r}
plot(datos.venta.ts, type="l", col = "red", main = "Tipo de Cambio entre el $ y el ¢ (Suavizado)", ylab = "")
st.1 <- stats::filter(datos.venta.ts, filter=rep(1/9, 9))
st.2 <- stats::filter(datos.venta.ts, filter=rep(1/13, 13))
st.3 <- stats::filter(datos.venta.ts, filter=rep(1/21, 21))
lines(st.1, col = "blue")
lines(st.2, col = "green")
lines(st.3, col = "black")

st.1 <- xts(st.1, datos$FECHA)
st.2 <- xts(st.2, datos$FECHA)
st.3 <- xts(st.3, datos$FECHA)
suavizado <- cbind(datos.venta, st.1, st.2, st.3)
dygraph(suavizado, ylab = "Valor", main = "Tipo de Cambio entre el $ y el ¢") %>%
  dySeries("..1",label="Venta") %>%
  dySeries("..2",label="Datos_S9") %>%
  dySeries("..3",label="Datos_S13") %>%
  dySeries("..4",label="Datos_S21") %>%
  dyOptions(colors = c("red","blue","green","black")) %>% dyRangeSelector()
```

####c) Para ambas series realice una descomposicíon (tendencia, ciclo, estacionalidad y aleatoriedad).
####Usando plot de R
```{r}
plot(stl(datos.compra.ts, s.window="periodic"))
plot(stl(datos.venta.ts, s.window="periodic"))
```

####Usando ggplot y ggfortify
```{r}
autoplot(stl(datos.venta.ts, s.window = 'periodic'), ts.colour = 'red')
autoplot(stl(datos.venta.ts, s.window = 'periodic'), ts.colour = 'blue')
```

##Ejercicio 6

###[15 puntos] En el sitio de Yahoo Finance: http://finance.yahoo.com/ se pueden bajas los precios de las acciones de las compañías más importantes del mundo 

####a) Baje los precios de las acciones de CISCO e INTEL
```{r}
datos.CSCO <- read.table(file = "DatosV4/CSCO.csv", sep = ",", dec = ".", header = T)
datos.INTC <- read.table(file = "DatosV4/INTC.csv", sep = ",", dec = ".", header = T)
```

####b) Realice un suavizado lineal para ambas series en precio de apertura (Open) usando filtros de a = 3, a = 13 y a = 41 elementos. Grafique lo anterior usando el comando plot de R y el paquete dygraphs. Sugerencia: Recuerde hacer un manejo adecuado de fechas eliminando si es necesario feriado sábados y domingos.
```{r}
eliminar.fin.semanas <- function(fechas){
  library(timeDate)
  fechas.filtradas <- fechas[!weekdays(fechas) %in% c("sábado","domingo")]
  fechas.filtradas <- fechas.filtradas[!fechas.filtradas %in% as_date(holidayNYSE(2015))] 
  fechas.filtradas <- fechas.filtradas[!fechas.filtradas %in% as_date(holidayNYSE(2016))] 
  fechas.filtradas <- fechas.filtradas[!fechas.filtradas %in% as_date(holidayNYSE(2017))]
  fechas.filtradas <- fechas.filtradas[!fechas.filtradas %in% as_date(holidayNYSE(2018))]
  return(fechas.filtradas)
}

datos.CSCO$Date <- as.Date(datos.CSCO$Date , format = "%Y-%m-%d")
datos.CSCO$Date <- eliminar.fin.semanas(datos.CSCO$Date)
datos.INTC$Date <- as.Date(datos.INTC$Date, format = "%Y-%m-%d")
datos.INTC$Date <- eliminar.fin.semanas(datos.INTC$Date)
```

```{r}
datos.CSCO.xts <- xts(datos.CSCO$Open, datos.CSCO$Date)
datos.CSCO.ts <- ts(datos.CSCO$Open, start = c(1983,1), frequency = 365)
datos.INTC.xts <- xts(datos.INTC$Open, datos.INTC$Date)
datos.INTC.ts <- ts(datos.INTC$Open, start = c(1983,1), frequency = 365)

dygraph(cbind(datos.CSCO.xts, datos.INTC.xts), ylab = "Valor", main = "Historial de Acciones de CISCO VS INTEL") %>%
  dySeries("..1",label="CSCO") %>%
  dySeries("..2",label="INTC") %>%
  dyOptions(colors = c("red","blue")) %>% dyRangeSelector()

plot(datos.CSCO.ts, type="l", col = "red", main = "Historial de Acciones de CISCO (Suavizado)", ylab = "")
st.1 <- stats::filter(datos.CSCO.ts, filter=rep(1/7, 7)) 
st.2 <- stats::filter(datos.CSCO.ts, filter=rep(1/27, 27))
st.3 <- stats::filter(datos.CSCO.ts, filter=rep(1/83, 83))
lines(st.1, col = "blue")
lines(st.2, col = "green")
lines(st.3, col = "brown")

st.1 <- xts(st.1, datos.CSCO$Date)
st.2 <- xts(st.2, datos.CSCO$Date)
st.3 <- xts(st.3, datos.CSCO$Date)
suavizado <- cbind(datos.CSCO.xts, st.1, st.2, st.3)
dygraph(suavizado, ylab = "Valor", main = "Historial de Acciones de CISCO (Suavizado)") %>%
  dySeries("..1",label="Compra") %>%
  dySeries("..2",label="Datos_S7") %>%
  dySeries("..3",label="Datos_S27") %>%
  dySeries("..4",label="Datos_S82") %>%
  dyOptions(colors = c("red","blue","green","black")) %>% dyRangeSelector()

plot(datos.INTC.ts, type="l", col = "red", main = "Historial de Acciones de INTEL (Suavizado)", ylab = "")
st.1 <- stats::filter(datos.INTC.ts, filter=rep(1/7, 7)) 
st.2 <- stats::filter(datos.INTC.ts, filter=rep(1/27, 27))
st.3 <- stats::filter(datos.INTC.ts, filter=rep(1/83, 83))
lines(st.1, col = "blue")
lines(st.2, col = "green")
lines(st.3, col = "brown")

st.1 <- xts(st.1, datos.INTC$Date)
st.2 <- xts(st.2, datos.INTC$Date)
st.3 <- xts(st.3, datos.INTC$Date)
suavizado <- cbind(datos.INTC.xts, st.1, st.2, st.3)
dygraph(suavizado, ylab = "Valor", main = "Historial de Acciones de INTEL (Suavizado)") %>%
  dySeries("..1",label="INTC") %>%
  dySeries("..2",label="Datos_S7") %>%
  dySeries("..3",label="Datos_S27") %>%
  dySeries("..4",label="Datos_S83") %>%
  dyOptions(colors = c("red","blue","green","black")) %>% dyRangeSelector()
```




